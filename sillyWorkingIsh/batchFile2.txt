sub foo ( )
          output ( "foo" )
      end

call foo ( )

sub add ( val1 val2 ) 
          sum = ( val1 + val2 )
          output ( val1 "+" val2 "=" sum )
      end
      
call add ( 2 4 )

call add ( "foo" "bar" )

sub sumTo ( num ) 
          sum = 0
          while ( num > 0 )
              sum = ( sum + num )
              num = ( num - 1 )
          end
          output ( sum )
      end
      
call sumTo ( 10 )

call sumTo ( ( 10 * 10 ) )

sub stamp ( word times )
          final = "" 
          repeat times 
              final = ( final + word )
          end
          output ( final )
      end
      
call stamp ( "foo" 3 )

call stamp ( ( "X" + "Y" ) ( 4 * 2 ) )

sub hailstone ( n ) 
          if ( n == 1 ) 
              output ( "1" )
              output ( "STUCK" )
          else 
              output ( n )
              local rem = ( n % 2 )
              if ( rem == 0 )
                  n = ( n / 2 )
              else
                  local triple = ( n * 3 )
                  n = ( triple + 1 )
              end
              call hailstone ( n ) 
          end    
      end
      
call hailstone ( 5 )

call hailstone ( 17 )